# Pulumi Collect Action
#
# Collects Pulumi preview artifacts and builds deployment matrices for requested stacks.
# This action downloads preview markers and artifacts, then builds a matrix of
# successful previews for deployment.
#
# Usage:
# ```yaml
# - uses: jmmaloney4/workflows/.github/actions/pulumi-collect@main
#   id: collect
#   with:
#     stacks: '["stage","prod"]'
# - name: Use collected matrix
#   run: echo '${{ steps.collect.outputs.matrix }}'
# ```

name: 'Collect Pulumi previews and build deploy matrix'
description: 'Download success markers and previews, summarize results, and output deployment matrix'

inputs:
  stacks:
    description: 'JSON array of stack names to collect (e.g., ["stage","prod"])'
    required: true
  working-directory:
    description: 'Working directory for operations'
    required: false
    default: '.'

outputs:
  matrix:
    description: 'JSON matrix of {project, stack} objects ready for deployment'
    value: ${{ steps.build.outputs.matrix }}
  summary-path:
    description: 'Path to the generated summary file'
    value: ${{ steps.build.outputs.summary-path }}

runs:
  using: 'composite'
  steps:
  - name: Download success markers
    uses: actions/download-artifact@v4
    with:
      pattern: 'preview-ok-*'
      path: preview-ok

  - name: Download preview artifacts
    uses: actions/download-artifact@v4
    with:
      pattern: 'preview-*'
      path: preview-previews

  - name: Build deployment matrix
    id: build
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    run: |
      set -euo pipefail
      
      echo "=== Building deployment matrix for requested stacks ==="
      echo "Requested stacks: ${{ inputs.stacks }}"
      
      # Debug: List all downloaded artifacts
      echo "=== Debug: Downloaded artifact structure ==="
      find . -type f -name "*.json" | head -20 || echo "No JSON files found"
      
      # Debug: Show preview-ok directory contents
      echo "=== Debug: preview-ok directory contents ==="
      ls -la preview-ok/ 2>/dev/null || echo "preview-ok directory not found"
      find preview-ok -type f 2>/dev/null | head -10 || echo "No files in preview-ok"
      
      # Collect all successful preview markers
      matrix_items=()
      summary_file="preview-summary.md"
      
      # Initialize summary
      {
        echo "<!-- pulumi-preview-summary -->"
        echo "## 🔍 Pulumi Preview Summary"
        echo ""
        echo "| Project | Stack | Status | Preview |"
        echo "|---------|-------|--------|---------|"
      } > "$summary_file"
      
      # Process success markers
      if [ -d "preview-ok" ] && [ "$(ls -A "preview-ok" 2>/dev/null)" ]; then
        stacks='${{ inputs.stacks }}'
        echo "=== Debug: Processing success markers ==="
        echo "Stacks variable: $stacks"
        
        for marker_file in "preview-ok"/*.json; do
          if [ -f "$marker_file" ]; then
            echo "=== Debug: Processing marker file: $marker_file ==="
            cat "$marker_file"
            
            # Extract project and stack from marker
            project=$(jq -r '.project' "$marker_file")
            stack=$(jq -r '.stack' "$marker_file")
            echo "Extracted project: '$project', stack: '$stack'"
            
            # Check if this stack is in our requested stacks
            echo "Checking if stack '$stack' is in requested stacks: $stacks"
            if jq -e --arg stack "$stack" 'index($stack) != null' <<<"$stacks" >/dev/null; then
              echo "Found successful preview for requested stack: $project/$stack"
              
              # Add to matrix
              matrix_items+=("{\"project\": \"$project\", \"stack\": \"$stack\"}")
              
              # Add to summary
              safe_name="${project//\//__}"
              preview_path=""
              if [ -d "preview-previews" ]; then
                # Look for corresponding preview files
                preview_files=$(find "preview-previews" -name "*${safe_name}*" -type f | head -5)
                if [ -n "$preview_files" ]; then
                  preview_path="📄 [View Preview](#)"
                fi
              fi
              
              echo "| \`$project\` | \`$stack\` | ✅ Ready | $preview_path |" >> "$summary_file"
            else
              echo "❌ Skipping non-requested stack: $project/$stack (not in $stacks)"
            fi
          fi
        done
      else
        echo "❌ No success markers found in preview-ok directory"
        echo "Debug: Checking if preview-ok directory exists..."
        [ -d "preview-ok" ] && echo "preview-ok directory exists" || echo "preview-ok directory does not exist"
        echo "Debug: Checking if preview-ok directory has files..."
        ls -la preview-ok/ 2>/dev/null || echo "Cannot list preview-ok directory"
      fi
      
      # Build final matrix JSON
      if [ ${#matrix_items[@]} -eq 0 ]; then
        matrix="[]"
        echo "" >> "$summary_file"
        echo "⚠️ No successful previews found for requested stacks. Nothing to deploy." >> "$summary_file"
      else
        matrix="[$(IFS=,; echo "${matrix_items[*]}")]"
        echo "" >> "$summary_file"
        echo "🚀 **Ready to deploy:** ${#matrix_items[@]} stack(s)" >> "$summary_file"
      fi
      
      echo "" >> "$summary_file"
      echo "_Generated by Pulumi Collect Action at $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> "$summary_file"
      
      echo "Final matrix: $matrix"
      echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
      echo "summary-path=$summary_file" >> "$GITHUB_OUTPUT"
      
      # Output to step summary
      cat "$summary_file" >> "$GITHUB_STEP_SUMMARY"

  - name: Upload summary artifact
    uses: actions/upload-artifact@v4
    with:
      name: pulumi-preview-summary
      path: ${{ steps.build.outputs.summary-path }}
      if-no-files-found: warn