# Pulumi Setup Action
#
# A composite action that sets up Pulumi with authentication, dependencies,
# and environment configuration for infrastructure deployments.
#
# Usage:
# ```yaml
# - uses: jmmaloney4/workflows/.github/actions/pulumi-setup@main
#   with:
#     login-backend: gs://my-pulumi-state
#   env:
#     GOOGLE_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
#     GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ vars.GCP_SERVICE_ACCOUNT_EMAIL }}
# ```

name: 'Pulumi Setup'
description: 'Setup Pulumi with authentication, dependencies, and environment configuration'

inputs:
  login-backend:
    description: 'Pulumi backend URL to login to (e.g., gs://bucket, s3://bucket, or blank for Pulumi Cloud)'
    required: false
    default: ''
  install-dependencies:
    description: 'Install project dependencies (npm/pnpm install, pip install, etc.)'
    required: false
    default: 'true'
  working-directory:
    description: 'Working directory for Pulumi commands'
    required: false
    default: '.'
  enable-gcp-auth:
    description: 'Enable GCP authentication via Workload Identity'
    required: false
    default: 'true'
  enable-aws-auth:
    description: 'Enable AWS authentication via OIDC'
    required: false
    default: 'false'
  aws-region:
    description: 'AWS region (used with enable-aws-auth)'
    required: false
    default: 'us-east-1'
  aws-role-arn:
    description: 'AWS IAM role ARN for OIDC authentication'
    required: false
    default: ''

outputs:
  pulumi-version:
    description: 'Installed Pulumi version'
    value: ${{ steps.pulumi-info.outputs.version }}
  backend-url:
    description: 'Pulumi backend URL in use'
    value: ${{ steps.pulumi-info.outputs.backend }}

runs:
  using: 'composite'
  steps:

  - name: Authenticate to Google Cloud
    if: ${{ inputs.enable-gcp-auth == 'true' && env.GOOGLE_WORKLOAD_IDENTITY_PROVIDER != '' }}
    uses: google-github-actions/auth@v2
    with:
      workload_identity_provider: ${{ env.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
      service_account: ${{ env.GOOGLE_SERVICE_ACCOUNT_EMAIL }}

  - name: Setup Google Cloud SDK
    if: ${{ inputs.enable-gcp-auth == 'true' && env.GOOGLE_WORKLOAD_IDENTITY_PROVIDER != '' }}
    uses: google-github-actions/setup-gcloud@v2

  - name: Configure AWS credentials
    if: ${{ inputs.enable-aws-auth == 'true' && inputs.aws-role-arn != '' }}
    uses: aws-actions/configure-aws-credentials@v4
    with:
      role-to-assume: ${{ inputs.aws-role-arn }}
      aws-region: ${{ inputs.aws-region }}

  - name: Install project dependencies
    if: ${{ inputs.install-dependencies == 'true' }}
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    run: |
      set -euo pipefail
      
      # Use Nix development shell for dependency installation
      if [ -f "package.json" ]; then
        echo "Installing npm/pnpm dependencies via Nix..."
        if command -v pnpm >/dev/null 2>&1 || nix develop -c sh -c 'command -v pnpm' >/dev/null 2>&1; then
          nix develop -c pnpm install
        else
          nix develop -c npm install
        fi
      elif [ -f "requirements.txt" ]; then
        echo "Installing Python dependencies via Nix..."
        nix develop -c pip install -r requirements.txt
      elif [ -f "Pipfile" ]; then
        echo "Installing Python dependencies via pipenv..."
        nix develop -c pipenv install
      elif [ -f "poetry.lock" ]; then
        echo "Installing Python dependencies via poetry..."
        nix develop -c poetry install
      fi

  - name: Login to Pulumi backend
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    run: |
      set -euo pipefail
      
      if [ -n "${{ inputs.login-backend }}" ]; then
        echo "Logging in to Pulumi backend: ${{ inputs.login-backend }}"
        nix develop -c pulumi login "${{ inputs.login-backend }}"
      elif [ -n "${PULUMI_ACCESS_TOKEN:-}" ]; then
        echo "Using Pulumi Cloud with access token"
        nix develop -c pulumi login
      else
        echo "::warning::No Pulumi backend or access token configured"
      fi

  - name: Get Pulumi information
    id: pulumi-info
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    run: |
      set -euo pipefail
      
      # Write outputs from inside the devshell to avoid capturing banner noise
      nix develop -c bash -lc '
        set -euo pipefail
        version=$(pulumi version)
        backend=$(pulumi whoami --url 2>/dev/null || echo "none")
        {
          echo "version=$version"
          echo "backend=$backend"
        } >> "$GITHUB_OUTPUT"
      '

      # Read back values for summary rendering
      version=$(grep -E '^version=' "$GITHUB_OUTPUT" | tail -1 | cut -d= -f2-)
      backend=$(grep -E '^backend=' "$GITHUB_OUTPUT" | tail -1 | cut -d= -f2-)
      
      # Output info to summary
      {
        echo "### ☁️ Pulumi Setup Complete"
        echo ""
        echo "- **Version:** $version"
        echo "- **Backend:** $backend"
        echo "- **Using Nix:** true"
        echo "- **Working Directory:** ${{ inputs.working-directory }}"
        if [ "${{ inputs.enable-gcp-auth }}" == "true" ]; then
          echo "- **GCP Auth:** ✅ Enabled"
        fi
        if [ "${{ inputs.enable-aws-auth }}" == "true" ]; then
          echo "- **AWS Auth:** ✅ Enabled"
        fi
      } >> "$GITHUB_STEP_SUMMARY"
