# Docker Discover Action
#
# Discovers Dockerfiles in a repository and generates a build matrix with 
# complete path-based image naming for monorepos.
#
# Usage:
# ```yaml
# - uses: jmmaloney4/workflows/.github/actions/docker-discover@v1
#   id: discover
#   with:
#     dockerfile-pattern: "**/Dockerfile"
#     exclude-paths: "node_modules/**,target/**"
#     registry: "ghcr.io"
# - name: Use matrix
#   run: echo '${{ steps.discover.outputs.matrix }}'
# ```

name: 'Docker Discover'
description: 'Discover Dockerfiles and generate build matrix with complete path-based naming'

inputs:
  dockerfile-pattern:
    description: 'Pattern to search for Dockerfiles'
    required: false
    default: "**/Dockerfile"
  exclude-paths:
    description: 'Paths to exclude from search (comma-separated)'
    required: false
    default: "node_modules/**,target/**,.git/**,**/node_modules/**,**/target/**"
  registry:
    description: 'Container registry for full image URLs'
    required: false
    default: "ghcr.io"
  build-changed-only:
    description: 'Only discover Dockerfiles in changed directories'
    required: false
    default: 'false'
  working-directory:
    description: 'Working directory to search in'
    required: false
    default: '.'

outputs:
  matrix:
    description: 'JSON matrix of discovered Dockerfiles'
    value: ${{ steps.generate-matrix.outputs.matrix }}
  has-dockerfiles:
    description: 'Whether any Dockerfiles were found'
    value: ${{ steps.generate-matrix.outputs.has_dockerfiles }}
  count:
    description: 'Number of Dockerfiles found'
    value: ${{ steps.generate-matrix.outputs.count }}

runs:
  using: 'composite'
  steps:
  - name: Generate Docker build matrix
    id: generate-matrix
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    run: |
      set -euo pipefail
      
      echo "=== Discovering Dockerfiles ==="
      echo "Pattern: ${{ inputs.dockerfile-pattern }}"
      echo "Exclude: ${{ inputs.exclude-paths }}"
      echo "Registry: ${{ inputs.registry }}"
      echo "Changed only: ${{ inputs.build-changed-only }}"
      
      # Convert exclude paths to find arguments
      exclude_args=""
      IFS=',' read -ra EXCLUDES <<< "${{ inputs.exclude-paths }}"
      for exclude in "${EXCLUDES[@]}"; do
        exclude=$(echo "$exclude" | xargs) # trim whitespace
        if [ -n "$exclude" ]; then
          exclude_args="$exclude_args -path ./$exclude -prune -o"
        fi
      done
      
      # Find Dockerfiles
      dockerfiles_tmp="$(mktemp)"
      echo "Searching for Dockerfiles..."
      
      if [ -n "$exclude_args" ]; then
        find . $exclude_args -name "Dockerfile" -type f -print | sort > "$dockerfiles_tmp"
      else
        find . -name "Dockerfile" -type f | sort > "$dockerfiles_tmp"
      fi
      
      echo "Found $(wc -l < "$dockerfiles_tmp") potential Dockerfiles before filtering"
      
      # Filter by changed files if requested
      if [ "${{ inputs.build-changed-only }}" == "true" ] && [ "${GITHUB_EVENT_NAME:-}" == "pull_request" ]; then
        echo "Filtering by changed files..."
        changed_files_tmp="$(mktemp)"
        
        # Get changed files (handle both PR and push events)
        if command -v git >/dev/null 2>&1; then
          git diff --name-only HEAD~1 HEAD > "$changed_files_tmp" 2>/dev/null || {
            echo "Warning: Could not get changed files, building all Dockerfiles"
            cp "$dockerfiles_tmp" "$changed_files_tmp"
          }
        else
          echo "Warning: git not available, building all Dockerfiles"
          cp "$dockerfiles_tmp" "$changed_files_tmp"
        fi
        
        # Keep only Dockerfiles in changed directories
        filtered_tmp="$(mktemp)"
        while IFS= read -r dockerfile; do
          if [ -n "$dockerfile" ]; then
            dockerfile_dir="$(dirname "$dockerfile")"
            # Check if any changed file is in this directory or subdirectories
            if grep -q "^${dockerfile_dir}/" "$changed_files_tmp" 2>/dev/null || \
               grep -q "^${dockerfile#./}" "$changed_files_tmp" 2>/dev/null; then
              echo "$dockerfile" >> "$filtered_tmp"
            fi
          fi
        done < "$dockerfiles_tmp"
        
        mv "$filtered_tmp" "$dockerfiles_tmp"
        rm -f "$changed_files_tmp"
        
        echo "After change filtering: $(wc -l < "$dockerfiles_tmp") Dockerfiles"
      fi
      
      # Generate matrix entries
      matrix_items=()
      count=0
      
      while IFS= read -r dockerfile; do
        if [ -n "$dockerfile" ] && [ -f "$dockerfile" ]; then
          # Remove leading ./
          dockerfile_clean="${dockerfile#./}"
          
          # Get directory path and determine image name
          if [ "$dockerfile_clean" == "Dockerfile" ]; then
            # Root Dockerfile - use repo name only (not full path)
            repo_name="${{ github.repository }}"
            image_name="${repo_name#*/}" # Remove owner/ prefix
            dir_path="."
          else
            # Use complete directory path as image name
            dir_path="$(dirname "$dockerfile_clean")"
            image_name="$dir_path"
          fi
          
          # Create full registry URL
          full_image="${{ inputs.registry }}/${{ github.repository }}/$image_name"
          
          echo "✓ $dockerfile_clean -> $image_name (context: $dir_path)"
          
          # Create matrix entry with all necessary information
          matrix_item=$(jq -nc \
            --arg dockerfile "$dockerfile_clean" \
            --arg image_name "$image_name" \
            --arg context "$dir_path" \
            --arg full_image "$full_image" \
            '{
              dockerfile: $dockerfile,
              image_name: $image_name,
              context: $context,
              full_image: $full_image
            }')
          
          matrix_items+=("$matrix_item")
          count=$((count + 1))
        fi
      done < "$dockerfiles_tmp"
      
      # Build final matrix and outputs
      if [ ${#matrix_items[@]} -eq 0 ]; then
        matrix="[]"
        has_dockerfiles="false"
        count=0
        echo "❌ No Dockerfiles found"
      else
        matrix="[$(IFS=,; echo "${matrix_items[*]}")]"
        has_dockerfiles="true"
        echo "✅ Generated matrix with $count entries"
      fi
      
      # Set outputs
      echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
      echo "has_dockerfiles=$has_dockerfiles" >> "$GITHUB_OUTPUT"
      echo "count=$count" >> "$GITHUB_OUTPUT"
      
      # Debug output
      echo "Final matrix JSON:"
      echo "$matrix" | jq '.' || echo "Invalid JSON: $matrix"
      
      # Cleanup
      rm -f "$dockerfiles_tmp"
      
      # Write summary to GitHub Actions summary
      {
        echo "### 🔍 Docker Discovery Results"
        echo ""
        if [ "$has_dockerfiles" == "true" ]; then
          echo "**Found $count Dockerfile(s):**"
          echo ""
          echo "| Dockerfile | Image Name | Registry URL | Context |"
          echo "|------------|------------|--------------|---------|"
          
          # Use jq to format the table, with fallback for invalid JSON
          if echo "$matrix" | jq -e . >/dev/null 2>&1; then
            echo "$matrix" | jq -r '.[] | "| `" + .dockerfile + "` | `" + .image_name + "` | `" + .full_image + "` | `" + .context + "` |"'
          else
            echo "| Error | Could not parse matrix | - | - |"
          fi
        else
          echo "❌ **No Dockerfiles found**"
          echo ""
          echo "**Search pattern:** \`${{ inputs.dockerfile-pattern }}\`"
          if [ -n "${{ inputs.exclude-paths }}" ]; then
            echo "**Excluded paths:** \`${{ inputs.exclude-paths }}\`"
          fi
          if [ "${{ inputs.build-changed-only }}" == "true" ]; then
            echo "**Note:** Only looking for changes due to \`build-changed-only: true\`"
          fi
        fi
        echo ""
        echo "_Discovery completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')_"
      } >> "$GITHUB_STEP_SUMMARY"