# Nix Setup Action
#
# A composite action that sets up Nix with optimal caching and configuration
# for CI/CD pipelines. Includes FlakeHub cache and common optimizations.
#
# Usage:
# ```yaml
# - uses: jmmaloney4/workflows/.github/actions/nix-setup@v1
#   with:
#     enable-flakehub-cache: true
#     extra-nix-config: |
#       experimental-features = nix-command flakes
#       accept-flake-config = true
# ```

name: 'Nix Setup'
description: 'Setup Nix with optimal caching and configuration for CI/CD'

inputs:
  enable-flakehub-cache:
    description: 'Enable FlakeHub cache for faster flake input resolution'
    required: false
    default: 'true'
  nix-installer-url:
    description: 'Custom Nix installer URL (default: Determinate Systems installer)'
    required: false
    default: ''
  extra-nix-config:
    description: 'Additional Nix configuration (appended to nix.conf)'
    required: false
    default: ''
  enable-magic-nix-cache:
    description: 'Enable Magic Nix Cache for better build caching'
    required: false
    default: 'true'
  github-token:
    description: 'GitHub token for private flake access'
    required: false
    default: ${{ github.token }}
  flake-inputs-cache:
    description: 'Enable caching of flake inputs to speed up evaluation'
    required: false
    default: 'true'

outputs:
  nix-version:
    description: 'Installed Nix version'
    value: ${{ steps.nix-info.outputs.version }}
  nix-system:
    description: 'Nix system identifier (e.g., x86_64-linux, aarch64-darwin)'
    value: ${{ steps.nix-info.outputs.system }}

runs:
  using: 'composite'
  steps:
  - name: Install Nix
    uses: DeterminateSystems/nix-installer-action@main
    with:
      nix-installer-url: ${{ inputs.nix-installer-url }}
      extra-conf: |
        experimental-features = nix-command flakes
        accept-flake-config = true
        auto-optimise-store = true
        max-jobs = auto
        cores = 0
        ${{ inputs.extra-nix-config }}

  - name: Enable Magic Nix Cache
    if: ${{ inputs.enable-magic-nix-cache == 'true' }}
    uses: DeterminateSystems/magic-nix-cache-action@main
    with:
      upstream-cache: https://cache.nixos.org

  - name: Enable FlakeHub Cache  
    if: ${{ inputs.enable-flakehub-cache == 'true' }}
    uses: DeterminateSystems/flakehub-cache-action@main

  - name: Configure Git for private flakes
    if: ${{ inputs.github-token != '' && inputs.github-token != github.token }}
    shell: bash
    run: |
      # Configure git to use the provided token for private repos
      git config --global url."https://x-access-token:${{ inputs.github-token }}@github.com/".insteadOf "https://github.com/"

  - name: Get Nix information
    id: nix-info
    shell: bash
    run: |
      nix_version=$(nix --version | head -n1 | cut -d' ' -f3)
      nix_system=$(nix eval --impure --raw --expr 'builtins.currentSystem')
      
      echo "version=$nix_version" >> "$GITHUB_OUTPUT"
      echo "system=$nix_system" >> "$GITHUB_OUTPUT"
      
      # Output useful info to summary
      {
        echo "### ❄️ Nix Setup Complete"
        echo ""
        echo "- **Version:** $nix_version"
        echo "- **System:** $nix_system" 
        echo "- **FlakeHub Cache:** ${{ inputs.enable-flakehub-cache }}"
        echo "- **Magic Nix Cache:** ${{ inputs.enable-magic-nix-cache }}"
      } >> "$GITHUB_STEP_SUMMARY"

  - name: Verify Nix installation
    shell: bash
    run: |
      set -euo pipefail
      
      echo "=== Nix Installation Verification ==="
      nix --version
      
      echo "=== Testing basic Nix evaluation ==="
      nix eval --expr '1 + 1'
      
      echo "=== Available flake commands ==="
      if [ -f flake.nix ]; then
        nix flake show --json >/dev/null
        echo "✅ Flake evaluation successful"
      else
        echo "ℹ️  No flake.nix found in current directory"
      fi
      
      echo "=== Nix configuration ==="
      nix config show | head -20