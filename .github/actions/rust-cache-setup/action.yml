# Rust Cache Setup Action
#
# Sets up Rust toolchain from Nix flake and configures optimal Cargo caching.
# Uses Nix development environments for reproducible Rust builds.
#
# Usage:
# ```yaml
# # Default devshell:
# - uses: jmmaloney4/workflows/.github/actions/rust-cache-setup@main
#   id: rust-setup
#   with:
#     flake-ref: "."
#     cache-key-suffix: "custom"
# 
# # Specific devshell:
# - uses: jmmaloney4/workflows/.github/actions/rust-cache-setup@main
#   id: rust-setup-dev
#   with:
#     flake-ref: ".#rust-dev"
#     cache-group: "custom-cache"
# ```

name: 'Rust Cache Setup'
description: 'Setup Rust toolchain with optimal Cargo caching configuration'

inputs:
  flake-ref:
    description: 'Flake reference for the development environment (e.g., ".", ".#rust-dev")'
    required: false
    default: '.'
  cache-key-suffix:
    description: 'Additional suffix for cache keys'
    required: false
    default: ''
  cache-group:
    description: 'Cache group name (defaults to job-specific naming)'
    required: false
    default: ''
  enable-cache:
    description: 'Enable Cargo caching'
    required: false
    default: 'true'
  cache-sweep:
    description: 'Enable cache sweeping to remove old cached items'
    required: false
    default: 'true'

outputs:
  cache-key:
    description: 'Generated cache key for Cargo cache'
    value: ${{ steps.cache-key.outputs.key }}
  toolchain-version:
    description: 'Actual Rust toolchain version installed'
    value: ${{ steps.toolchain-info.outputs.version }}
  cache-group:
    description: 'Cache group used for this setup'
    value: ${{ steps.cache-key.outputs.group }}

runs:
  using: 'composite'
  steps:


  - name: Get toolchain information
    id: toolchain-info
    shell: bash
    run: |
      # Compute and write outputs inside the devshell to avoid shellHook banners
      nix develop ${{ inputs.flake-ref }} -c bash -lc '
        set -euo pipefail
        version=$(rustc --version | awk "{print \$2}")
        echo "version=$version" >> "$GITHUB_OUTPUT"
        echo "Rust version (via Nix): $version"
      '

  - name: Compute cache key
    id: cache-key
    shell: bash
    run: |
      set -euo pipefail
      
      # Generate base cache key from Cargo.lock
      cargo_lock_hash="${{ hashFiles('**/Cargo.lock') }}"
      
      # Determine cache group
      if [ -n "${{ inputs.cache-group }}" ]; then
        group="${{ inputs.cache-group }}"
      else
        # Default group based on job context
        job_name="${{ github.job }}"
        group="cargo-${job_name}"
      fi
      
      # Build cache key with flake reference hash for differentiation
      flake_hash=$(echo "${{ inputs.flake-ref }}" | sha256sum | cut -d' ' -f1 | cut -c1-8)
      key="${group}-${flake_hash}-${cargo_lock_hash}"
      
      # Add suffix if provided
      if [ -n "${{ inputs.cache-key-suffix }}" ]; then
        key="${key}-${{ inputs.cache-key-suffix }}"
      fi
      
      echo "Generated cache key: $key"
      echo "Cache group: $group"
      echo "Cargo.lock hash: $cargo_lock_hash"
      
      echo "key=$key" >> "$GITHUB_OUTPUT"
      echo "group=$group" >> "$GITHUB_OUTPUT"

  - name: Setup Cargo cache
    if: ${{ inputs.enable-cache == 'true' }}
    uses: Leafwing-Studios/cargo-cache@v2
    with:
      sweep-cache: ${{ inputs.cache-sweep }}
      cache-group: ${{ steps.cache-key.outputs.group }}

  - name: Output setup summary
    shell: bash
    run: |
      {
        echo "### ðŸ¦€ Rust Cache Setup Complete"
        echo ""
        echo "- **Toolchain:** from Nix flake"
        echo "- **Version:** ${{ steps.toolchain-info.outputs.version }}"
        echo "- **Flake reference:** ${{ inputs.flake-ref }}"
        echo "- **Cache enabled:** ${{ inputs.enable-cache }}"
        if [ "${{ inputs.enable-cache }}" == "true" ]; then
          echo "- **Cache key:** \`${{ steps.cache-key.outputs.key }}\`"
          echo "- **Cache group:** \`${{ steps.cache-key.outputs.group }}\`"
        fi
      } >> "$GITHUB_STEP_SUMMARY"

  - name: Verify Rust installation
    shell: bash
    run: |
      echo "=== Rust Installation Verification ==="
      
      echo "Using Nix development environment:"
      nix develop ${{ inputs.flake-ref }} -c rustc --version
      nix develop ${{ inputs.flake-ref }} -c cargo --version
      
      # Check if clippy is available
      if nix develop ${{ inputs.flake-ref }} -c clippy-driver --version >/dev/null 2>&1; then
        echo "Clippy: available"
      else
        echo "Clippy: not available"
      fi
      
      # Check if rustfmt is available
      if nix develop ${{ inputs.flake-ref }} -c rustfmt --version >/dev/null 2>&1; then
        echo "Rustfmt: available"
      else
        echo "Rustfmt: not available"
      fi
      
      echo "âœ… Rust setup verification complete"
