# Docker Build and Push Action
#
# A composite action for building and pushing Docker images to registries
# with standardized tagging, caching, and metadata extraction.
#
# Usage:
# ```yaml
# - uses: jmmaloney4/workflows/.github/actions/docker-build@v1
#   with:
#     image-name: my-app
#     dockerfile-path: ./Dockerfile
#     docker-context: ./
#     registry: ghcr.io
#     github-token: ${{ secrets.GITHUB_TOKEN }}
# ```

name: 'Docker Build and Push'
description: 'Build and push Docker images with standardized tagging and caching'

inputs:
  image-name:
    description: 'Name of the Docker image'
    required: true
  dockerfile-path:
    description: 'Path to the Dockerfile'
    required: true
  docker-context:
    description: 'Docker build context path'
    required: true
  registry:
    description: 'Container registry (default: ghcr.io)'
    required: false
    default: 'ghcr.io'
  github-token:
    description: 'GitHub token for registry authentication'
    required: true
  pre-build-script:
    description: 'Optional script to run before building (e.g., Dockerfile updates)'
    required: false
    default: ''
  push:
    description: 'Whether to push the image (default: true)'
    required: false
    default: 'true'
  platforms:
    description: 'Target platforms for multi-arch builds (e.g., linux/amd64,linux/arm64)'
    required: false
    default: 'linux/amd64'
  build-args:
    description: 'Build arguments (newline-separated)'
    required: false
    default: ''
  labels:
    description: 'Additional labels (newline-separated)'
    required: false
    default: ''
  tag-strategy:
    description: 'Tagging strategy: standard, semver, or custom'
    required: false
    default: 'standard'
  custom-tags:
    description: 'Custom tags (newline-separated, used with tag-strategy=custom)'
    required: false
    default: ''

outputs:
  image-tags:
    description: 'Generated image tags'
    value: ${{ steps.meta.outputs.tags }}
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build-and-push.outputs.digest }}
  image-size:
    description: 'Image size in bytes'
    value: ${{ steps.build-and-push.outputs.imageid }}
  registry-url:
    description: 'Full registry URL for the pushed image'
    value: ${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image-name }}

runs:
  using: 'composite'
  steps:
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3
    with:
      platforms: ${{ inputs.platforms }}

  - name: Login to Container Registry
    uses: docker/login-action@v3
    with:
      registry: ${{ inputs.registry }}
      username: ${{ github.actor }}
      password: ${{ inputs.github-token }}

  - name: Extract Docker metadata
    id: meta
    uses: docker/metadata-action@v5
    with:
      images: ${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image-name }}
      flavor: |
        latest=auto
      tags: |
        # Standard tagging strategy
        type=raw,value=latest,enable=${{ github.ref_name == github.event.repository.default_branch && inputs.tag-strategy == 'standard' }}
        type=ref,event=branch,enable=${{ inputs.tag-strategy == 'standard' }}
        type=ref,event=pr,enable=${{ inputs.tag-strategy == 'standard' }}
        type=sha,prefix=sha-,enable=${{ inputs.tag-strategy == 'standard' }}
        # Semantic version tagging
        type=semver,pattern={{version}},enable=${{ inputs.tag-strategy == 'semver' }}
        type=semver,pattern={{major}}.{{minor}},enable=${{ inputs.tag-strategy == 'semver' }}
        type=semver,pattern={{major}},enable=${{ inputs.tag-strategy == 'semver' }}
        # Custom tagging
        ${{ inputs.tag-strategy == 'custom' && inputs.custom-tags || '' }}
      labels: |
        org.opencontainers.image.title=${{ inputs.image-name }}
        org.opencontainers.image.description=Built from ${{ github.repository }}
        org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
        org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        org.opencontainers.image.version=${{ github.ref_name }}
        org.opencontainers.image.created=${{ steps.meta.outputs.created }}
        org.opencontainers.image.revision=${{ github.sha }}
        ${{ inputs.labels }}

  - name: Run pre-build script
    if: ${{ inputs.pre-build-script != '' }}
    shell: bash
    run: ${{ inputs.pre-build-script }}

  - name: Build and push Docker image
    id: build-and-push
    uses: docker/build-push-action@v5
    with:
      context: ${{ inputs.docker-context }}
      file: ${{ inputs.dockerfile-path }}
      platforms: ${{ inputs.platforms }}
      push: ${{ inputs.push }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      build-args: ${{ inputs.build-args }}
      cache-from: type=gha
      cache-to: type=gha,mode=max
      provenance: false
      sbom: false

  - name: Output image information
    shell: bash
    run: |
      echo "### 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "**Image:** ${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image-name }}" >> $GITHUB_STEP_SUMMARY
      echo "**Digest:** \`${{ steps.build-and-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
      echo '${{ steps.meta.outputs.tags }}' | while IFS= read -r tag; do
        echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
      done
      echo "" >> $GITHUB_STEP_SUMMARY
      
      if ${{ inputs.push }}; then
        echo "✅ Image successfully pushed to registry"
      else
        echo "🏗️ Image built but not pushed (push=false)"
      fi