#!/bin/bash
# Build deployment matrix for Pulumi collect action
# Arguments:
#   $1 - JSON array of requested stacks (e.g., '["prod","stage"]')
#   $2 - Working directory (default: .)

set -euo pipefail

REQUESTED_STACKS="${1:-[]}"
WORKING_DIR="${2:-.}"

cd "$WORKING_DIR"

echo "=== Building deployment matrix for requested stacks ==="
echo "Requested stacks: $REQUESTED_STACKS"

# Debug: List all downloaded artifacts
echo "=== Debug: Downloaded artifact structure ==="
find . -type f -name "*.json" | head -20 || echo "No JSON files found"

# Debug: Show preview-ok directory contents
echo "=== Debug: preview-ok directory contents ==="
ls -la preview-ok/ 2>/dev/null || echo "preview-ok directory not found"
find preview-ok -type f 2>/dev/null | head -10 || echo "No files in preview-ok"

# Collect all successful preview markers
matrix_items=()
summary_file="preview-summary.md"

# Initialize summary
{
  echo "<!-- pulumi-preview-summary -->"
  echo "## üîç Pulumi Preview Summary"
  echo ""
  echo "| Project | Stack | Status | Preview |"
  echo "|---------|-------|--------|---------|"
} > "$summary_file"

# Process success markers
if [ -d "preview-ok" ] && [ "$(ls -A "preview-ok" 2>/dev/null)" ]; then
  stacks="$REQUESTED_STACKS"
  echo "=== Debug: Processing success markers ==="
  echo "Stacks variable: $stacks"
  
  # Iterate over marker files recursively (handles preview-ok/*/*.json layout)
  while IFS= read -r marker_file; do
    if [ -f "$marker_file" ]; then
      echo "=== Debug: Processing marker file: $marker_file ==="
      cat "$marker_file"
      
      # Extract project and stack from marker
      project=$(jq -r '.project' "$marker_file")
      stack=$(jq -r '.stack' "$marker_file")
      echo "Extracted project: '$project', stack: '$stack'"
      
      # Check if this stack is in our requested stacks
      echo "Checking if stack '$stack' is in requested stacks: $stacks"
      if jq -e --arg stack "$stack" 'index($stack) != null' <<<"$stacks" >/dev/null; then
        echo "Found successful preview for requested stack: $project/$stack"
        
        # Add to matrix
        matrix_items+=("{\"project\": \"$project\", \"stack\": \"$stack\"}")
        
        # Add to summary
        safe_name="${project//\//__}"
        preview_path=""
        if [ -d "preview-previews" ]; then
          # Look for corresponding preview files
          preview_files=$(find "preview-previews" -name "*${safe_name}*" -type f | head -5)
          if [ -n "$preview_files" ]; then
            preview_path="üìÑ [View Preview](#)"
          fi
        fi
        
        echo "| \`$project\` | \`$stack\` | ‚úÖ Ready | $preview_path |" >> "$summary_file"
      else
        echo "‚ùå Skipping non-requested stack: $project/$stack (not in $stacks)"
      fi
    fi
  done < <(find "preview-ok" -type f -name "*.json" | sort)
else
  echo "‚ùå No success markers found in preview-ok directory"
  echo "Debug: Checking if preview-ok directory exists..."
  [ -d "preview-ok" ] && echo "preview-ok directory exists" || echo "preview-ok directory does not exist"
  echo "Debug: Checking if preview-ok directory has files..."
  ls -la preview-ok/ 2>/dev/null || echo "Cannot list preview-ok directory"
fi

# Build final matrix JSON
if [ ${#matrix_items[@]} -eq 0 ]; then
  matrix="[]"
  echo "" >> "$summary_file"
  echo "‚ö†Ô∏è No successful previews found for requested stacks. Nothing to deploy." >> "$summary_file"
else
  matrix="[$(IFS=,; echo "${matrix_items[*]}")]"
  echo "" >> "$summary_file"
  echo "üöÄ **Ready to deploy:** ${#matrix_items[@]} stack(s)" >> "$summary_file"
fi

echo "" >> "$summary_file"
echo "_Generated by Pulumi Collect Action at $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> "$summary_file"

echo "Final matrix: $matrix"

# Output results (in GitHub Actions, these would go to $GITHUB_OUTPUT and $GITHUB_STEP_SUMMARY)
if [ -n "${GITHUB_OUTPUT:-}" ]; then
  echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
  echo "summary-path=$summary_file" >> "$GITHUB_OUTPUT"
fi

if [ -n "${GITHUB_STEP_SUMMARY:-}" ]; then
  cat "$summary_file" >> "$GITHUB_STEP_SUMMARY"
fi

# Also output for debugging
echo "=== Generated Summary ==="
cat "$summary_file"
