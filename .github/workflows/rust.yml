name: "ü¶Ä rust"
on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Runner label for all jobs'
        required: true
        type: string
      repository:
        description: 'Repository to checkout and build (owner/repo)'
        required: true
        type: string
      ref:
        description: 'Git ref to checkout and build'
        required: true
        type: string
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  id-token: write
  checks: write
jobs:
  cargo-check:
    name: "üî¨ cargo check"
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - uses: jmmaloney4/toolbox/.github/actions/nix-setup@main
      - uses: Leafwing-Studios/cargo-cache@43ec9a5bad6e7f174e7fc65dcf533de75ff65881 # v2.6.0
        with:
          sweep-cache: true
          cache-group: cargo-check-${{ hashFiles('**/Cargo.lock') }}
      - name: cargo check (via Nix devshell)
        shell: 'nix -L develop -c bash {0}'
        run: cargo check
  cargo-test:
    name: "üß™ cargo test"
    needs: cargo-check
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - uses: jmmaloney4/toolbox/.github/actions/nix-setup@main
      # restore cargo-check cache
      - uses: Leafwing-Studios/cargo-cache@43ec9a5bad6e7f174e7fc65dcf533de75ff65881 # v2.6.0
        with:
          cache-group: cargo-check-${{ hashFiles('**/Cargo.lock') }}
          save-if: false
      - uses: Leafwing-Studios/cargo-cache@43ec9a5bad6e7f174e7fc65dcf533de75ff65881 # v2.6.0
        with:
          sweep-cache: true
          cache-group: cargo-test-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests with nextest (JUnit output)
        shell: 'nix -L develop -c bash {0}'
        run: |
          set -euo pipefail
          cargo nextest run --config-file nextest.toml --profile ci --hide-progress-bar --test-threads 4
      - name: Test Report
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2.1.1
        if: ${{ !cancelled() }}
        with:
          name: Rust tests
          path: target/nextest/ci/junit.xml
          reporter: java-junit
  cargo-clippy:
    name: "üßë‚Äçüè´ cargo clippy"
    needs: cargo-check
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - uses: jmmaloney4/toolbox/.github/actions/nix-setup@main
      - uses: olix0r/cargo-action-fmt/setup@9269f3aa1ff01775d95efc97037e2cbdb41d9684 # v2.0.1
      - uses: Leafwing-Studios/cargo-cache@43ec9a5bad6e7f174e7fc65dcf533de75ff65881 # v2.6.0
        with:
          sweep-cache: true
          cache-group: cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
      - name: cargo clippy (via Nix devshell)
        shell: 'nix -L develop -c bash {0}'
        # one day we can add `-D warnings`
        run: |-
          set -euo pipefail
          cargo clippy --message-format=json | cargo-action-fmt
