# Pulumi Infrastructure Deployment Pipeline
#
# A comprehensive Pulumi deployment pipeline that supports preview, deployment
# across multiple environments (stage/prod), and automatic stack detection.
#
# Usage:
# ```yaml
# jobs:
#   pulumi:
#     uses: jmmaloney4/workflows/.github/workflows/pulumi.yml@main
#     with:
#       deploy-stacks: '["stage"]'  # or '["prod"]' or '["stage","prod"]'
#       auto-detect-stacks: true
#       gcp-project-id: "my-project"
#       pulumi-backend: "gs://my-pulumi-state"
#     secrets:
#       GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
#       GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
# ```

name: "☁️ Pulumi"

on:
  workflow_call:
    inputs:
      deploy-stacks:
        description: "JSON array of stack names to deploy (e.g., [\"stage\"], [\"prod\"], [\"stage\",\"prod\"])"
        required: false
        type: string
        default: "[]"
      auto-detect-stacks:
        description: "Auto-detect Pulumi stacks from repository"
        required: false
        type: boolean
        default: true
      stack-matrix:
        description: "JSON array of {project, stack} objects (overrides auto-detection)"
        required: false
        type: string
        default: "[]"
      pulumi-backend:
        description: "Pulumi backend URL"
        required: false
        type: string
        default: ""
      runs-on:
        description: "Runner to use for jobs"
        required: false
        type: string
        default: "ubuntu-latest"
      gcp-project-id:
        description: "GCP project ID (if using GCP)"
        required: false
        type: string
        default: ""
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        description: "GCP Workload Identity Provider"
        required: false
      GCP_SERVICE_ACCOUNT_EMAIL:
        description: "GCP Service Account Email"
        required: false
      PULUMI_ACCESS_TOKEN:
        description: "Pulumi Cloud access token (alternative to backend)"
        required: false
    outputs:
      deployed-stacks:
        description: "JSON array of successfully deployed stacks"
        value: ${{ jobs.deployed-output.outputs.stacks || '[]' }}

permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write
  deployments: write

jobs:
  detect-pulumi-stacks:
    name: "🧩 Detect Pulumi stacks"
    if: ${{ inputs.auto-detect-stacks }}
    runs-on: ${{ inputs.runs-on }}
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Detect Pulumi stacks
      id: detect
      uses: jmmaloney4/workflows/.github/actions/pulumi-stack-detect@main

  pulumi-preview:
    name: "🔍 Pulumi preview (${{ matrix.project }}, ${{ matrix.stack }})"
    needs: [detect-pulumi-stacks]
    if: ${{ always() }}
    runs-on: ${{ inputs.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ inputs.auto-detect-stacks && fromJson(needs.detect-pulumi-stacks.outputs.matrix || '[]') || fromJson(inputs.stack-matrix || '[]') }}
    env:
      GOOGLE_PROJECT: ${{ inputs.gcp-project-id }}
      GOOGLE_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
      PULUMI_CONFIG_PASSPHRASE: ""
      USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: jmmaloney4/workflows/.github/actions/nix-setup@main

    - name: Setup Pulumi environment
      uses: jmmaloney4/workflows/.github/actions/pulumi-setup@main
      with:
        login-backend: ${{ inputs.pulumi-backend }}

    - name: Derive artifact-safe name
      id: names
      shell: bash
      run: |
        safe_name="${{ matrix.project }}"
        safe_name="${safe_name//\//__}"
        echo "safe_name=$safe_name" >> "$GITHUB_OUTPUT"

    - name: Pulumi preview
      id: preview
      continue-on-error: true
      shell: bash
      run: |
        cd "${{ matrix.project }}"
        
        nix develop --command pulumi preview --stack "${{ matrix.stack }}" --non-interactive

    - name: Mark successful preview
      if: ${{ steps.preview.outcome == 'success' }}
      run: |
        mkdir -p ok
        safe_name="${{ matrix.project }}"
        safe_name="${safe_name//\//__}"
        jq -n --arg project "${{ matrix.project }}" --arg stack "${{ matrix.stack }}" \
          '{project:$project, stack:$stack}' > "ok/${safe_name}-${{ matrix.stack }}.json"

    - name: Upload preview success markers
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: preview-ok-${{ matrix.stack }}-${{ hashFiles('ok/*.json') }}
        path: ok/*.json
        if-no-files-found: ignore

    - name: Upload preview artifacts
      uses: actions/upload-artifact@v4
      with:
        name: preview-${{ steps.names.outputs.safe_name }}-${{ matrix.stack }}
        path: |
          ${{ matrix.project }}/*.json
          ${{ matrix.project }}/previews/*
        if-no-files-found: ignore

  collect-deploy-targets:
    name: "📦 Collect successful previews for requested stacks"
    needs: [pulumi-preview]
    if: ${{ join(fromJson(inputs.deploy-stacks)) != '' }}
    runs-on: ${{ inputs.runs-on }}
    outputs:
      matrix: ${{ steps.collect.outputs.matrix }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Collect successful previews
      id: collect
      uses: jmmaloney4/workflows/.github/actions/pulumi-collect@main
      with:
        stacks: ${{ inputs.deploy-stacks }}

  pulumi-up:
    name: "🚀 Deploy (${{ matrix.project }}, ${{ matrix.stack }})"
    needs: [collect-deploy-targets]
    if: ${{ join(fromJson(needs.collect-deploy-targets.outputs.matrix)) != '' }}
    runs-on: ${{ inputs.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.collect-deploy-targets.outputs.matrix) }}
    concurrency:
      group: pulumi-${{ matrix.project }}-${{ matrix.stack }}
      cancel-in-progress: false
    environment:
      name: ${{ matrix.stack }}
    env:
      GOOGLE_PROJECT: ${{ inputs.gcp-project-id }}
      GOOGLE_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
      PULUMI_CONFIG_PASSPHRASE: ""
      USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: jmmaloney4/workflows/.github/actions/nix-setup@main

    - name: Setup Pulumi environment
      uses: jmmaloney4/workflows/.github/actions/pulumi-setup@main
      with:
        login-backend: ${{ inputs.pulumi-backend }}

    - name: Pulumi up
      shell: bash
      run: |
        cd "${{ matrix.project }}"
        
        nix develop --command pulumi up --stack "${{ matrix.stack }}" --yes --non-interactive

    - name: Mark deployed
      shell: bash
      run: |
        mkdir -p deployed
        safe_name="${{ matrix.project }}"
        safe_name="${safe_name//\//__}"
        jq -n --arg project "${{ matrix.project }}" --arg stack "${{ matrix.stack }}" \
          '{project:$project, stack:$stack, environment:$stack, success:true}' \
          > "deployed/${safe_name}-${{ matrix.stack }}.json"

    - name: Upload deploy markers
      uses: actions/upload-artifact@v4
      with:
        name: deploy-ok
        path: deployed/*.json
        if-no-files-found: ignore

  deployed-output:
    name: "📊 Deployed stacks output"
    needs: [pulumi-up]
    if: ${{ always() && join(fromJson(inputs.deploy-stacks)) != '' }}
    runs-on: ${{ inputs.runs-on }}
    outputs:
      stacks: ${{ steps.merge.outputs.stacks }}
    steps:
    - name: Download deploy markers
      uses: actions/download-artifact@v4
      with:
        name: deploy-ok
        path: deploy-ok

    - name: Merge deploy markers
      id: merge
      shell: bash
      run: |
        set -euo pipefail
        files=$(find deploy-ok -type f -name '*.json' 2>/dev/null || true)
        if [ -z "$files" ]; then
          echo 'stacks=[]' >> "$GITHUB_OUTPUT"
        else
          jq -s '[.[]] | unique_by(.project + "|" + .stack)' $files > stacks.json
          echo "stacks=$(cat stacks.json)" >> "$GITHUB_OUTPUT"
        fi
