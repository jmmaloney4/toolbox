# Nix Flake Build Pipeline
#
# A comprehensive Nix flake build pipeline with intelligent caching, 
# cache warming, and matrix builds for uncached derivations.
#
# Usage:
# ```yaml
# jobs:
#   nix:
#     uses: jmmaloney4/workflows/.github/workflows/nix.yml@main
#     with:
#       runs-on: "ubuntu-latest"
#       max-parallel: 2
#       probe-timeout: 180
#       cache-version: "v1"
# ```

name: "❄️ nix"

on:
  workflow_call:
    inputs:
      runs-on:
        description: "Runner to use for jobs"
        required: false
        type: string
        default: "ubuntu-latest"
      max-parallel:
        description: "Maximum parallel builds in matrix"
        required: false
        type: number
        default: 1
      probe-timeout:
        description: "Timeout in seconds for cache probing"
        required: false
        type: number
        default: 180
      cache-version:
        description: "Cache version identifier"
        required: false
        type: string
        default: "v1"
      flake-inputs-cache:
        description: "Enable FlakeHub cache for inputs"
        required: false
        type: boolean
        default: true
      push-images:
        description: "Enable pushing Docker/OCI images discovered in flake (packages ending with -image)"
        required: false
        type: boolean
        default: false
      image-repo-prefix:
        description: "Registry repo prefix to publish to (e.g., ghcr.io/owner/repo or ghcr.io/org/project). The image name is appended."
        required: false
        type: string
        default: "ghcr.io/${{ github.repository }}"
    outputs:
      built-outputs:
        description: "JSON array of successfully built outputs"
        value: ${{ jobs.build.outputs.built-outputs }}
      cache-key:
        description: "Nix evaluation cache key used"
        value: ${{ jobs.warm-cache.outputs.cache_key }}

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  warm-cache:
    name: "🔥 Warm Nix eval cache"
    runs-on: ${{ inputs.runs-on }}
    outputs:
      cache_key: ${{ steps.compute-key.outputs.cache_key }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: jmmaloney4/workflows/.github/actions/nix-setup@main
      with:
        enable-flakehub-cache: ${{ inputs.flake-inputs-cache }}

    - name: Compute cache key
      id: compute-key
      shell: bash
      run: |
        set -euo pipefail
        # Use Nix system (e.g., aarch64-darwin, x86_64-linux) instead of runner OS
        system="$(nix eval --impure --raw --expr 'builtins.currentSystem')"
        echo "Nix system: $system"
        lock_hash="${{ hashFiles('flake.lock') }}"
        echo "cache_key=nix-eval-${system}-${lock_hash}-${{ inputs.cache-version }}" >> "$GITHUB_OUTPUT"

    - name: Restore eval/source caches
      id: evalcache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/nix/eval-cache-v5
          ~/.cache/nix/fetcher-cache-v1.sqlite
          ~/.cache/nix/git
          ~/.cache/nix/tarballs
        key: ${{ steps.compute-key.outputs.cache_key }}

    - name: Warm Nix eval caches
      if: steps.evalcache-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail
        nix eval --impure --raw --expr 'builtins.currentSystem' >/dev/null
        nix flake show --json >/dev/null

    - name: Save eval/source caches
      if: steps.evalcache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.cache/nix/eval-cache-v5
          ~/.cache/nix/fetcher-cache-v1.sqlite
          ~/.cache/nix/git
          ~/.cache/nix/tarballs
        key: ${{ steps.compute-key.outputs.cache_key }}

  detect:
    name: "☃️ Detect flake outputs"
    needs: [warm-cache]
    runs-on: ${{ inputs.runs-on }}
    outputs:
      matrix_include: ${{ steps.compute.outputs.matrix-include }}
      has_work: ${{ steps.compute.outputs.has-work }}
      all_outputs: ${{ steps.compute.outputs.all-outputs }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: jmmaloney4/workflows/.github/actions/nix-setup@main
      with:
        enable-flakehub-cache: ${{ inputs.flake-inputs-cache }}

    - name: Restore eval/source caches
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/nix/eval-cache-v5
          ~/.cache/nix/fetcher-cache-v1.sqlite
          ~/.cache/nix/git
          ~/.cache/nix/tarballs
        key: ${{ needs.warm-cache.outputs.cache_key }}

    - name: Detect flake outputs
      id: compute
      uses: jmmaloney4/workflows/.github/actions/nix-flake-detect@main
      with:
        probe-timeout: ${{ inputs.probe-timeout }}
        cache-key: ${{ needs.warm-cache.outputs.cache_key }}

  build:
    name: "👷‍♂️ ${{ matrix.category }}.${{ matrix.system }}.${{ matrix.name }}"
    needs: [detect, warm-cache]
    runs-on: ${{ inputs.runs-on }}
    if: ${{ needs.detect.outputs.has_work == 'true' }}
    outputs:
      built-outputs: ${{ steps.collect-outputs.outputs.built }}
    strategy:
      fail-fast: false
      max-parallel: ${{ inputs.max-parallel }}
      matrix:
        include: ${{ fromJson(needs.detect.outputs.matrix_include) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: jmmaloney4/workflows/.github/actions/nix-setup@main
      with:
        enable-flakehub-cache: ${{ inputs.flake-inputs-cache }}

    - name: Restore eval/source caches
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/nix/eval-cache-v5
          ~/.cache/nix/fetcher-cache-v1.sqlite
          ~/.cache/nix/git
          ~/.cache/nix/tarballs
        key: ${{ needs.warm-cache.outputs.cache_key }}

    - name: "🚀 Build with nix-fast-build"
      uses: jmmaloney4/workflows/.github/actions/nix-fast-build@main
      with:
        flake-attr: ${{ matrix.flake_attr }}

    - name: Collect build outputs
      id: collect-outputs
      shell: bash
      run: |
        # Create a simple success marker for this build
        output_info=$(jq -nc \
          --arg category "${{ matrix.category }}" \
          --arg system "${{ matrix.system }}" \
          --arg name "${{ matrix.name }}" \
          --arg flake_attr "${{ matrix.flake_attr }}" \
          '{category: $category, system: $system, name: $name, flake_attr: $flake_attr, success: true}')
        echo "built=$output_info" >> "$GITHUB_OUTPUT"

  gen-image-artifacts:
    name: "📦 Generate image artifacts"
    needs: [detect, warm-cache]
    runs-on: ${{ inputs.runs-on }}
    if: ${{ inputs.push-images == true }}
    outputs:
      has_images: ${{ steps.gen.outputs.has-images }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: jmmaloney4/workflows/.github/actions/nix-setup@main
      with:
        enable-flakehub-cache: ${{ inputs.flake-inputs-cache }}

    - name: Restore eval/source caches
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/nix/eval-cache-v5
          ~/.cache/nix/fetcher-cache-v1.sqlite
          ~/.cache/nix/git
          ~/.cache/nix/tarballs
        key: ${{ needs.warm-cache.outputs.cache_key }}

    - name: Create image descriptor env files
      id: gen
      uses: jmmaloney4/workflows/.github/actions/nix-image-descriptors@main
      with:
        all-outputs-json: ${{ needs.detect.outputs.all_outputs }}
        out-dir: images

    - name: Upload image artifacts
      uses: actions/upload-artifact@v4
      with:
        name: images
        path: images/*.env
        if-no-files-found: ignore

  push-images:
    name: "🚀 Push built images to GHCR"
    needs: [gen-image-artifacts]
    if: ${{ inputs.push-images == true && needs.gen-image-artifacts.outputs.has_images == 'true' }}
    runs-on: ${{ inputs.runs-on }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Nix
      uses: jmmaloney4/workflows/.github/actions/nix-setup@main
      with:
        enable-flakehub-cache: ${{ inputs.flake-inputs-cache }}

    - name: Download image artifacts
      uses: actions/download-artifact@v4
      with:
        name: images
        path: images
        merge-multiple: false

    - name: List artifacts
      shell: bash
      run: |
        set -euo pipefail
        if compgen -G "images/*.env" > /dev/null; then
          echo "Found the following image descriptors:"
          ls -la images
          echo
          for f in images/*.env; do echo "$(basename "$f"): $(cat "$f")"; done
        else
          echo "No image artifacts found; nothing to push."
        fi

    - name: Push images
      if: ${{ hashFiles('images/*.env') != '' }}
      uses: jmmaloney4/workflows/.github/actions/nix-image-push@main
      with:
        images-dir: images
        image-repo-prefix: ${{ inputs.image-repo-prefix }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
