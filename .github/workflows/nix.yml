name: '‚ùÑÔ∏è nix'
on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Runner type for all jobs'
        required: true
        type: string
      repository:
        description: 'Repository to checkout and build (format: owner/repo)'
        required: true
        type: string
      ref:
        description: 'Git ref to checkout and build'
        required: true
        type: string
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  id-token: write
jobs:
  detect:
    name: '‚òÉÔ∏è detect flake outputs'
    runs-on: ${{ inputs.runs-on }}
    outputs:
      matrix_include: ${{ steps.compute.outputs.matrix_include }}
      has_work: ${{ steps.compute.outputs.has_work }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - uses: jmmaloney4/toolbox/.github/actions/nix-setup@main
      - name: compute build-needed matrix via nix-eval-jobs
        id: compute
        uses: jmmaloney4/toolbox/.github/actions/compute-flake-build-matrix@main
        with:
          probe-timeout-seconds: '180'
  build:
    name: "üë∑‚Äç‚ôÇÔ∏è ${{ matrix.category }}.${{ matrix.system }}.${{ matrix.name }}"
    needs: [detect]
    runs-on: ${{ inputs.runs-on }}
    if: ${{ needs.detect.outputs.has_work == 'true' }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include: ${{ fromJson(needs.detect.outputs.matrix_include) }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - uses: jmmaloney4/toolbox/.github/actions/nix-setup@main
      - name: "üöÄ build with nix-fast-build"
        if: ${{ matrix.noop != 'true' }}
        shell: 'nix -L shell nixpkgs#nix-fast-build -c bash {0}'
        run: |-
          set -euo pipefail
          attr='${{ matrix.flake_attr }}'
          echo "Building via nix-fast-build: $attr"
          # Build only missing (uncached) derivations, with CI-friendly logs and no out-link
          nix-fast-build --skip-cached --no-nom --no-link --flake "$attr"
