/**
 * Worker script template for serving static files from R2.
 * Phase 1 MVP: Basic R2 serving without Cache API or SPA fallback.
 */

/**
 * Generate the Worker script code for serving static files from R2.
 *
 * @param bucketBinding - The R2 bucket binding name (e.g., "R2_BUCKET")
 * @returns The Worker script code as a string
 */
export function generateWorkerScript(bucketBinding: string): string {
	return `
/**
 * WorkerSite - Static file server with R2 backend
 * Generated by @jmmaloney4/sector7 WorkerSite component
 * Phase 1 MVP: Basic R2 serving
 */

export default {
	async fetch(request, env, ctx) {
		const url = new URL(request.url);

		// 1. Path normalization - remove leading slash
		let objectKey = url.pathname.slice(1);

		// 2. Directory index handling
		if (objectKey === '' || objectKey.endsWith('/')) {
			objectKey += 'index.html';
		}

		// 3. Fetch from R2
		const object = await env.${bucketBinding}.get(objectKey);

		// 4. Handle 404
		if (!object) {
			return new Response('Not Found', { status: 404 });
		}

		// 5. Build response with metadata
		const headers = new Headers();

		// Content-Type from R2 metadata
		if (object.httpMetadata?.contentType) {
			headers.set('Content-Type', object.httpMetadata.contentType);
		} else {
			// Fallback based on file extension
			const contentType = guessContentType(objectKey);
			headers.set('Content-Type', contentType);
		}

		// ETag for cache validation
		headers.set('ETag', object.httpEtag);

		// Cache-Control
		headers.set('Cache-Control', 'public, max-age=31536000, immutable');

		// Last-Modified
		if (object.uploaded) {
			headers.set('Last-Modified', object.uploaded.toUTCString());
		}

		return new Response(object.body, { status: 200, headers });
	},
};

/**
 * Guess content type from file extension
 */
function guessContentType(key) {
	const ext = key.split('.').pop()?.toLowerCase();
	const types = {
		html: 'text/html; charset=utf-8',
		css: 'text/css; charset=utf-8',
		js: 'application/javascript; charset=utf-8',
		json: 'application/json; charset=utf-8',
		png: 'image/png',
		jpg: 'image/jpeg',
		jpeg: 'image/jpeg',
		gif: 'image/gif',
		svg: 'image/svg+xml',
		ico: 'image/x-icon',
		woff: 'font/woff',
		woff2: 'font/woff2',
		ttf: 'font/ttf',
		eot: 'application/vnd.ms-fontobject',
		pdf: 'application/pdf',
		txt: 'text/plain; charset=utf-8',
	};
	return types[ext || ''] || 'application/octet-stream';
}
`.trim();
}
